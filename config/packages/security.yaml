security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    #password_hashers:
        #Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # Hachage sécurisé des mots de passe
    password_hashers:
        App\Entity\Employe:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Employe
                property: email

    role_hierarchy:
        ROLE_ADMIN: [ ROLE_SUPERVISEUR, ROLE_EMPLOYE, PUBLIC_ACCESS]
        ROLE_SUPERVISEUR: [ ROLE_EMPLOYE]
        ROLE_EMPLOYE:     [PUBLIC_ACCESS]
        ROLE_PUBLIC:      []

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: login
                check_path: login
                username_parameter: email       # ✅ obligatoire
                password_parameter: password    # ✅ obligatoire
                default_target_path: projet.index
                enable_csrf: true
                csrf_token_id: authenticate # ✅ doit correspondre à ton formulaire
            logout:
                path: logout
                target: welcome
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # Contrôle d’accès (ordre prioritaire)
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/$, roles: PUBLIC_ACCESS }

        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/superviseur, roles: ROLE_SUPERVISEUR }
        - { path: ^/projet, roles: ROLE_EMPLOYE }

        - { path: ^/, roles: ROLE_EMPLOYE }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
